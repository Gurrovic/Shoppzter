@page "/showlist/{id:int}"

@inject NavigationManager NavMan
@inject IShoppingListService _shoppingListService
@inject IToastService _toastService

@if (Model != null)
{
    {
        <div class="shopping-list-container">
            <span class="name-header">@Model.Name</span>
                <div class="shopping-list-header-container">
                    <div class="top-button" @onclick="(() => DeleteList(Model))">
                        <i class="bi bi-check-lg"/>
                        <span class="top-button-text">Finished</span>
                    </div>
                    <div class="top-button" @onclick="HandleClick">
                        <i class="bi bi-plus-circle"/>
                        <span class="top-button-text">Add Item</span>
                    </div>
                </div>
            @if (Model.Items != null && Model.Items.Any())
            {                
                    @foreach (var item in Model.Items)
                    {
                        <div class="shopping-list-item @GetItemCssClass(item)">
                            <span @onclick="() => ToggleItem(item)" style="cursor: pointer;">@item.Name</span>
                            <button class="icon-button float-end" @onclick="(() => DeleteItem(item))">
                                <i class="bi bi-trash" />
                            </button>
                        </div>
                    }                
            }
            else
            {
                <div class="no-items">No items in the list</div>
            }            
        </div>
    }
}

<ShoppingListItemModal @bind-ShowDialog="@ShowDialog"
                       Model=@Model
                       OnShoppingListItemAdded="HandleShoppingListAdded"/>

@code {
    [Parameter]
    public int id { get; set; }

    private ShoppingList Model { get; set; }

    private bool ShowDialog { get; set; }

    private List<ShoppingList>? shoppingLists { get; set; } 


    protected override async Task OnInitializedAsync()
    {
        Model = await _shoppingListService.GetShoppingList(id);
    }

    private void HandleClick()
    {
        ShowDialog = true;
    }

    private async void ToggleItem(ShoppingListItem item)
    {
        item.Completed = !item.Completed;
        await _shoppingListService.UpdateShoppingList(Model);
    }

    private string GetItemCssClass(ShoppingListItem item)
    {
        return item.Completed ? "selected" : "";
    }

    private async Task DeleteItem(ShoppingListItem item)
    {
        if(item != null)
        {
            Model = await _shoppingListService.DeleteItemFromShoppingList(Model, item);            
        }
    }

    private async Task DeleteList(ShoppingList shoppingList)
    {
        if (shoppingList.Items?.All(x => x.Completed) == true && shoppingList.Items.Any())
        {
            _toastService.ShowSuccess($"All items checked off. List deleted!");
            await _shoppingListService.DeleteShoppingList(shoppingList);
            NavMan.NavigateTo("/");
        }
    }

    private async Task HandleShoppingListAdded(ShoppingList newList)
    {
        Model = newList;
        await _shoppingListService.UpdateShoppingList(Model);       
        
        StateHasChanged();
    }
}