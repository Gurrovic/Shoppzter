@page "/"

@inject IShoppingListService _shoppingListService

<PageTitle>Shoppzter</PageTitle>

<div class="futuristic-header">
    <span style="font-size: 20px;">Shopping Lists</span>   
    
    <button @onclick="ShowAddShoppingListModal" class="add-button">+</button>
</div>

<div class="horizontal-line"></div>

<ShoppingListsComponent shoppingLists="shoppingLists"/>


@code {

    List<ShoppingList> shoppingLists = new List<ShoppingList>();
    ShoppingList shoppingList = new ShoppingList();

    [CascadingParameter] 
    public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        shoppingLists = await _shoppingListService.GetShoppingLists();        
    }    

    // private async Task ShowAddShoppingListModal()
    // {
    //     var modal = Modal.Show<AddShoppingListModal>("Add New List");
    //     var result = await modal.Result;

    //     if (!result.Cancelled && result.Data is ShoppingList)
    //     {
    //         Console.WriteLine("A new shopping list was added");
    //         shoppingLists = await _shoppingListService.GetShoppingLists(); // Refresh the list
    //     }
    // }

    private async Task ShowAddShoppingListModal()
    {
        var modal = Modal.Show<AddShoppingListModal>("Add New List");
        var result = await modal.Result;

        if (!result.Cancelled && result.Data is ShoppingList newShoppingList)
        {
            // Optimistically add the new list to the UI
            shoppingLists.Add(newShoppingList);
            // Update the UI to reflect the change
            StateHasChanged();

            // try
            // {
            //     // Attempt to add the new list to the backend
            //     await _shoppingListService.AddShoppingList(newShoppingList);
            //     // Optionally, refresh the list from the backend to ensure it's up-to-date
            //     // shoppingLists = await _shoppingListService.GetShoppingLists();
            // }
            // catch (Exception ex)
            // {
            //     // Handle any errors that occur during backend update
            //     // For example, roll back the optimistic UI update or show an error message
            //     Console.WriteLine($"Error adding shopping list: {ex.Message}");
            //     shoppingLists.Remove(newShoppingList);
            //     StateHasChanged();
            // }
        }
    }

}